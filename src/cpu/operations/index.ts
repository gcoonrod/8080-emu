import { CPU } from "../cpu";
import * as xferOps from './dataTransfer'
import * as mathOps from './arithmetic'
import * as logicOps from './logical'
import * as branchOps from './branching'
import * as spOps from './stack'
import * as ioOps from './io'
import * as specOps from './special'

export interface Operation {
  name: string
  size: 1 | 2 | 3
  opcode: number
  execute(this: CPU): void
}

export const NOP: Operation = {
  name: 'NOP',
  opcode: 0x00,
  size: 1,
  execute() {
    return
  }
}

export const OpMap: Map<number, Operation> = new Map<number, Operation>()
OpMap.set(NOP.opcode, NOP)

// Data Transfer Operations
OpMap.set(xferOps.MOV_BB.opcode, xferOps.MOV_BB)
OpMap.set(xferOps.MOV_BC.opcode, xferOps.MOV_BC)
OpMap.set(xferOps.MOV_BD.opcode, xferOps.MOV_BD)
OpMap.set(xferOps.MOV_BE.opcode, xferOps.MOV_BE)
OpMap.set(xferOps.MOV_BH.opcode, xferOps.MOV_BH)
OpMap.set(xferOps.MOV_BL.opcode, xferOps.MOV_BL)
OpMap.set(xferOps.MOV_BM.opcode, xferOps.MOV_BM)
OpMap.set(xferOps.MOV_BA.opcode, xferOps.MOV_BA)
OpMap.set(xferOps.MOV_CB.opcode, xferOps.MOV_CB)
OpMap.set(xferOps.MOV_CC.opcode, xferOps.MOV_CC)
OpMap.set(xferOps.MOV_CD.opcode, xferOps.MOV_CD)
OpMap.set(xferOps.MOV_CE.opcode, xferOps.MOV_CE)
OpMap.set(xferOps.MOV_CH.opcode, xferOps.MOV_CH)
OpMap.set(xferOps.MOV_CL.opcode, xferOps.MOV_CL)
OpMap.set(xferOps.MOV_CM.opcode, xferOps.MOV_CM)
OpMap.set(xferOps.MOV_CA.opcode, xferOps.MOV_CA)
OpMap.set(xferOps.MOV_DB.opcode, xferOps.MOV_DB)
OpMap.set(xferOps.MOV_DC.opcode, xferOps.MOV_DC)
OpMap.set(xferOps.MOV_DD.opcode, xferOps.MOV_DD)
OpMap.set(xferOps.MOV_DE.opcode, xferOps.MOV_DE)
OpMap.set(xferOps.MOV_DH.opcode, xferOps.MOV_DH)
OpMap.set(xferOps.MOV_DL.opcode, xferOps.MOV_DL)
OpMap.set(xferOps.MOV_DM.opcode, xferOps.MOV_DM)
OpMap.set(xferOps.MOV_DA.opcode, xferOps.MOV_DA)
OpMap.set(xferOps.MOV_EB.opcode, xferOps.MOV_EB)
OpMap.set(xferOps.MOV_EC.opcode, xferOps.MOV_EC)
OpMap.set(xferOps.MOV_ED.opcode, xferOps.MOV_ED)
OpMap.set(xferOps.MOV_EE.opcode, xferOps.MOV_EE)
OpMap.set(xferOps.MOV_EH.opcode, xferOps.MOV_EH)
OpMap.set(xferOps.MOV_EL.opcode, xferOps.MOV_EL)
OpMap.set(xferOps.MOV_EM.opcode, xferOps.MOV_EM)
OpMap.set(xferOps.MOV_EA.opcode, xferOps.MOV_EA)
OpMap.set(xferOps.MOV_HB.opcode, xferOps.MOV_HB)
OpMap.set(xferOps.MOV_HC.opcode, xferOps.MOV_HC)
OpMap.set(xferOps.MOV_HD.opcode, xferOps.MOV_HD)
OpMap.set(xferOps.MOV_HE.opcode, xferOps.MOV_HE)
OpMap.set(xferOps.MOV_HH.opcode, xferOps.MOV_HH)
OpMap.set(xferOps.MOV_HL.opcode, xferOps.MOV_HL)
OpMap.set(xferOps.MOV_HM.opcode, xferOps.MOV_HM)
OpMap.set(xferOps.MOV_HA.opcode, xferOps.MOV_HA)
OpMap.set(xferOps.MOV_LB.opcode, xferOps.MOV_LB)
OpMap.set(xferOps.MOV_LC.opcode, xferOps.MOV_LC)
OpMap.set(xferOps.MOV_LD.opcode, xferOps.MOV_LD)
OpMap.set(xferOps.MOV_LE.opcode, xferOps.MOV_LE)
OpMap.set(xferOps.MOV_LH.opcode, xferOps.MOV_LH)
OpMap.set(xferOps.MOV_LL.opcode, xferOps.MOV_LL)
OpMap.set(xferOps.MOV_LM.opcode, xferOps.MOV_LM)
OpMap.set(xferOps.MOV_LA.opcode, xferOps.MOV_LA)
OpMap.set(xferOps.MOV_MB.opcode, xferOps.MOV_MB)
OpMap.set(xferOps.MOV_MC.opcode, xferOps.MOV_MC)
OpMap.set(xferOps.MOV_MD.opcode, xferOps.MOV_MD)
OpMap.set(xferOps.MOV_ME.opcode, xferOps.MOV_ME)
OpMap.set(xferOps.MOV_MH.opcode, xferOps.MOV_MH)
OpMap.set(xferOps.MOV_ML.opcode, xferOps.MOV_ML)
OpMap.set(xferOps.MOV_MA.opcode, xferOps.MOV_MA)
OpMap.set(xferOps.MOV_AB.opcode, xferOps.MOV_AB)
OpMap.set(xferOps.MOV_AC.opcode, xferOps.MOV_AC)
OpMap.set(xferOps.MOV_AD.opcode, xferOps.MOV_AD)
OpMap.set(xferOps.MOV_AE.opcode, xferOps.MOV_AE)
OpMap.set(xferOps.MOV_AH.opcode, xferOps.MOV_AH)
OpMap.set(xferOps.MOV_AL.opcode, xferOps.MOV_AL)
OpMap.set(xferOps.MOV_AM.opcode, xferOps.MOV_AM)
OpMap.set(xferOps.MOV_AA.opcode, xferOps.MOV_AA)
OpMap.set(xferOps.MVI_A.opcode, xferOps.MVI_A)
OpMap.set(xferOps.MVI_B.opcode, xferOps.MVI_B)
OpMap.set(xferOps.MVI_C.opcode, xferOps.MVI_C)
OpMap.set(xferOps.MVI_D.opcode, xferOps.MVI_D)
OpMap.set(xferOps.MVI_E.opcode, xferOps.MVI_E)
OpMap.set(xferOps.MVI_H.opcode, xferOps.MVI_H)
OpMap.set(xferOps.MVI_L.opcode, xferOps.MVI_L)
OpMap.set(xferOps.MVI_M.opcode, xferOps.MVI_M)
OpMap.set(xferOps.LXI_B.opcode, xferOps.LXI_B)
OpMap.set(xferOps.LXI_D.opcode, xferOps.LXI_D)
OpMap.set(xferOps.LXI_H.opcode, xferOps.LXI_H)
OpMap.set(xferOps.LXI_SP.opcode, xferOps.LXI_SP)
OpMap.set(xferOps.LDA.opcode, xferOps.LDA)
OpMap.set(xferOps.SHLD.opcode, xferOps.SHLD)
OpMap.set(xferOps.STA.opcode, xferOps.STA)
OpMap.set(xferOps.LDAX_B.opcode, xferOps.LDAX_B)
OpMap.set(xferOps.LDAX_D.opcode, xferOps.LDAX_D)
OpMap.set(xferOps.STAX_B.opcode, xferOps.STAX_B)
OpMap.set(xferOps.STAX_D.opcode, xferOps.STAX_D)
OpMap.set(xferOps.LHLD.opcode, xferOps.LHLD)
OpMap.set(xferOps.XCHG.opcode, xferOps.XCHG)

// Arithmetic Operations
OpMap.set(mathOps.ADC_A.opcode, mathOps.ADC_A)
OpMap.set(mathOps.ADC_B.opcode, mathOps.ADC_B)
OpMap.set(mathOps.ADC_C.opcode, mathOps.ADC_C)
OpMap.set(mathOps.ADC_D.opcode, mathOps.ADC_D)
OpMap.set(mathOps.ADC_E.opcode, mathOps.ADC_E)
OpMap.set(mathOps.ADC_H.opcode, mathOps.ADC_H)
OpMap.set(mathOps.ADC_L.opcode, mathOps.ADC_L)
OpMap.set(mathOps.ADC_M.opcode, mathOps.ADC_M)
OpMap.set(mathOps.ADD_A.opcode, mathOps.ADD_A)
OpMap.set(mathOps.ADD_B.opcode, mathOps.ADD_B)
OpMap.set(mathOps.ADD_C.opcode, mathOps.ADD_C)
OpMap.set(mathOps.ADD_D.opcode, mathOps.ADD_D)
OpMap.set(mathOps.ADD_E.opcode, mathOps.ADD_E)
OpMap.set(mathOps.ADD_H.opcode, mathOps.ADD_H)
OpMap.set(mathOps.ADD_L.opcode, mathOps.ADD_L)
OpMap.set(mathOps.ADD_M.opcode, mathOps.ADD_M)
OpMap.set(mathOps.ACI.opcode, mathOps.ACI)
OpMap.set(mathOps.ADI.opcode, mathOps.ADI)
OpMap.set(mathOps.SUB_A.opcode, mathOps.SUB_A)
OpMap.set(mathOps.SUB_B.opcode, mathOps.SUB_B)
OpMap.set(mathOps.SUB_C.opcode, mathOps.SUB_C)
OpMap.set(mathOps.SUB_D.opcode, mathOps.SUB_D)
OpMap.set(mathOps.SUB_E.opcode, mathOps.SUB_E)
OpMap.set(mathOps.SUB_H.opcode, mathOps.SUB_H)
OpMap.set(mathOps.SUB_L.opcode, mathOps.SUB_L)
OpMap.set(mathOps.SUB_M.opcode, mathOps.SUB_M)
OpMap.set(mathOps.SBI.opcode, mathOps.SBI)
OpMap.set(mathOps.SUI.opcode, mathOps.SUI)
OpMap.set(mathOps.INR_A.opcode, mathOps.INR_A)
OpMap.set(mathOps.INR_B.opcode, mathOps.INR_B)
OpMap.set(mathOps.INR_C.opcode, mathOps.INR_C)
OpMap.set(mathOps.INR_D.opcode, mathOps.INR_D)
OpMap.set(mathOps.INR_E.opcode, mathOps.INR_E)
OpMap.set(mathOps.INR_H.opcode, mathOps.INR_H)
OpMap.set(mathOps.INR_L.opcode, mathOps.INR_L)
OpMap.set(mathOps.INR_M.opcode, mathOps.INR_M)
OpMap.set(mathOps.SBB_A.opcode, mathOps.SBB_A)
OpMap.set(mathOps.SBB_B.opcode, mathOps.SBB_B)
OpMap.set(mathOps.SBB_C.opcode, mathOps.SBB_C)
OpMap.set(mathOps.SBB_D.opcode, mathOps.SBB_D)
OpMap.set(mathOps.SBB_E.opcode, mathOps.SBB_E)
OpMap.set(mathOps.SBB_H.opcode, mathOps.SBB_H)
OpMap.set(mathOps.SBB_L.opcode, mathOps.SBB_L)
OpMap.set(mathOps.SBB_M.opcode, mathOps.SBB_M)
OpMap.set(mathOps.DCR_A.opcode, mathOps.DCR_A)
OpMap.set(mathOps.DCR_B.opcode, mathOps.DCR_B)
OpMap.set(mathOps.DCR_M.opcode, mathOps.DCR_M)
OpMap.set(mathOps.DCR_C.opcode, mathOps.DCR_C)
OpMap.set(mathOps.DCR_D.opcode, mathOps.DCR_D)
OpMap.set(mathOps.DCR_E.opcode, mathOps.DCR_E)
OpMap.set(mathOps.DCR_H.opcode, mathOps.DCR_H)
OpMap.set(mathOps.DCR_L.opcode, mathOps.DCR_L)
OpMap.set(mathOps.DAA.opcode, mathOps.DAA)
OpMap.set(mathOps.INX_B.opcode, mathOps.INX_B)
OpMap.set(mathOps.INX_D.opcode, mathOps.INX_D)
OpMap.set(mathOps.INX_H.opcode, mathOps.INX_H)
OpMap.set(mathOps.INX_SP.opcode, mathOps.INX_SP)
OpMap.set(mathOps.DCX_B.opcode, mathOps.DCX_B)
OpMap.set(mathOps.DCX_D.opcode, mathOps.DCX_D)
OpMap.set(mathOps.DCX_H.opcode, mathOps.DCX_H)
OpMap.set(mathOps.DCX_SP.opcode, mathOps.DCX_SP)
OpMap.set(mathOps.DAD_B.opcode, mathOps.DAD_B)
OpMap.set(mathOps.DAD_D.opcode, mathOps.DAD_D)
OpMap.set(mathOps.DAD_H.opcode, mathOps.DAD_H)
OpMap.set(mathOps.DAD_SP.opcode, mathOps.DAD_SP)

// Logical Operations
OpMap.set(logicOps.ANA_A.opcode, logicOps.ANA_A)
OpMap.set(logicOps.ANA_B.opcode, logicOps.ANA_B)
OpMap.set(logicOps.ANA_C.opcode, logicOps.ANA_C)
OpMap.set(logicOps.ANA_D.opcode, logicOps.ANA_D)
OpMap.set(logicOps.ANA_E.opcode, logicOps.ANA_E)
OpMap.set(logicOps.ANA_H.opcode, logicOps.ANA_H)
OpMap.set(logicOps.ANA_L.opcode, logicOps.ANA_L)
OpMap.set(logicOps.ANA_M.opcode, logicOps.ANA_M)
OpMap.set(logicOps.ANI.opcode, logicOps.ANI)
OpMap.set(logicOps.XRA_A.opcode, logicOps.XRA_A)
OpMap.set(logicOps.XRA_B.opcode, logicOps.XRA_B)
OpMap.set(logicOps.XRA_C.opcode, logicOps.XRA_C)
OpMap.set(logicOps.XRA_D.opcode, logicOps.XRA_D)
OpMap.set(logicOps.XRA_E.opcode, logicOps.XRA_E)
OpMap.set(logicOps.XRA_H.opcode, logicOps.XRA_H)
OpMap.set(logicOps.XRA_L.opcode, logicOps.XRA_L)
OpMap.set(logicOps.XRA_M.opcode, logicOps.XRA_M)
OpMap.set(logicOps.XRI.opcode, logicOps.XRI)
OpMap.set(logicOps.ORA_A.opcode, logicOps.ORA_A)
OpMap.set(logicOps.ORA_B.opcode, logicOps.ORA_B)
OpMap.set(logicOps.ORA_C.opcode, logicOps.ORA_C)
OpMap.set(logicOps.ORA_D.opcode, logicOps.ORA_D)
OpMap.set(logicOps.ORA_E.opcode, logicOps.ORA_E)
OpMap.set(logicOps.ORA_H.opcode, logicOps.ORA_H)
OpMap.set(logicOps.ORA_L.opcode, logicOps.ORA_L)
OpMap.set(logicOps.ORA_M.opcode, logicOps.ORA_M)
OpMap.set(logicOps.ORI.opcode, logicOps.ORI)
OpMap.set(logicOps.CMP_A.opcode, logicOps.CMP_A)
OpMap.set(logicOps.CMP_B.opcode, logicOps.CMP_B)
OpMap.set(logicOps.CMP_C.opcode, logicOps.CMP_C)
OpMap.set(logicOps.CMP_D.opcode, logicOps.CMP_D)
OpMap.set(logicOps.CMP_E.opcode, logicOps.CMP_E)
OpMap.set(logicOps.CMP_H.opcode, logicOps.CMP_H)
OpMap.set(logicOps.CMP_L.opcode, logicOps.CMP_L)
OpMap.set(logicOps.CMP_M.opcode, logicOps.CMP_M)
OpMap.set(logicOps.CPI.opcode, logicOps.CPI)
OpMap.set(logicOps.RLC.opcode, logicOps.RLC)
OpMap.set(logicOps.RAR.opcode, logicOps.RAR)
OpMap.set(logicOps.RRC.opcode, logicOps.RRC)
OpMap.set(logicOps.RAL.opcode, logicOps.RAL)
OpMap.set(logicOps.CMA.opcode, logicOps.CMA)
OpMap.set(logicOps.CMC.opcode, logicOps.CMC)
OpMap.set(logicOps.STC.opcode, logicOps.STC)

// Branching Operations
OpMap.set(branchOps.JMP.opcode, branchOps.JMP)
OpMap.set(branchOps.JC.opcode,  branchOps.JC)
OpMap.set(branchOps.JM.opcode,  branchOps.JM)
OpMap.set(branchOps.JNC.opcode, branchOps.JNC)
OpMap.set(branchOps.JNZ.opcode, branchOps.JNZ)
OpMap.set(branchOps.JZ.opcode,  branchOps.JZ)
OpMap.set(branchOps.JP.opcode,  branchOps.JP)
OpMap.set(branchOps.JPE.opcode, branchOps.JPE)
OpMap.set(branchOps.JPO.opcode, branchOps.JPO)
OpMap.set(branchOps.CALL.opcode, branchOps.CALL)
OpMap.set(branchOps.CC.opcode,  branchOps.CC)
OpMap.set(branchOps.CM.opcode,  branchOps.CM)
OpMap.set(branchOps.CNC.opcode, branchOps.CNC)
OpMap.set(branchOps.CNZ.opcode, branchOps.CNZ)
OpMap.set(branchOps.CZ.opcode,  branchOps.CZ)
OpMap.set(branchOps.CP.opcode,  branchOps.CP)
OpMap.set(branchOps.CPE.opcode, branchOps.CPE)
OpMap.set(branchOps.CPO.opcode, branchOps.CPO)
OpMap.set(branchOps.RET.opcode, branchOps.RET)
OpMap.set(branchOps.RC.opcode,  branchOps.RC)
OpMap.set(branchOps.RNC.opcode, branchOps.RNC)
OpMap.set(branchOps.RZ.opcode,  branchOps.RZ)
OpMap.set(branchOps.RNZ.opcode, branchOps.RNZ)
OpMap.set(branchOps.RM.opcode,  branchOps.RM)
OpMap.set(branchOps.RP.opcode,  branchOps.RP)
OpMap.set(branchOps.RPE.opcode, branchOps.RPE)
OpMap.set(branchOps.RPO.opcode, branchOps.RPO)
// TODO Restarts
OpMap.set(branchOps.PCHL.opcode, branchOps.PCHL)

// Stack Operations
OpMap.set(spOps.PUSH_B.opcode,   spOps.PUSH_B)
OpMap.set(spOps.PUSH_D.opcode,   spOps.PUSH_D)
OpMap.set(spOps.PUSH_H.opcode,   spOps.PUSH_H)
OpMap.set(spOps.PUSH_PSW.opcode, spOps.PUSH_PSW)
OpMap.set(spOps.POP_B.opcode,    spOps.POP_B)
OpMap.set(spOps.POP_D.opcode,    spOps.POP_D)
OpMap.set(spOps.POP_H.opcode,    spOps.POP_H)
OpMap.set(spOps.POP_PSW.opcode,  spOps.POP_PSW)
OpMap.set(spOps.XTHL.opcode,     spOps.XTHL)
OpMap.set(spOps.SPHL.opcode,     spOps.SPHL)

// Input/Output Operations
OpMap.set(ioOps.IN.opcode, ioOps.IN)
OpMap.set(ioOps.OUT.opcode, ioOps.OUT)

// Special Operations
OpMap.set(specOps.EI.opcode, specOps.EI)
OpMap.set(specOps.DI.opcode, specOps.DI)
OpMap.set(specOps.HLT.opcode, specOps.HLT)


export const getOperation = (opcode: number) => {
  const op = OpMap.get(opcode)
  if (op !== undefined) {
    return op
  }

  throw new Error(`0x${opcode.toString(16)} not valid op`)
}